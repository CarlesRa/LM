
 ## ESTRUCTURA MÍNIMA DE UNA WEB
  
  ```
  <!DOCTYPE html>
<html>
<head>
	<title></title>
</head>
<body>

</body>
</html>
```

## FORMAS DE USAR CSS
 ## CSS externo:
    Las modificaciones de estilo se guardan en un archivo diferente, se debe invocar al principio del documento HTML en el,
  bloque <head> así conseguimos que la carga de estilos se realice al principio, evitando la sensación que la página no se
  carga al momento.
  ej.
  ```
  
  <link rel="stylesheet" type="text/css" href="index.css" />
  ```
 ## CSS interno:
    Se añade directamente a la cabecera HTML del documento, se puede utilizar pero es recomendable la forma anterior, ya que
  evita la sensación de carga lenta.
  ej.
  ```
  
  <!DOCTYPE html>
<html>
<head>
    <title>Título de la página</title>
    <style type="text/css">
        div {
            background:#FFFFFF;
        }
    </style>
</head>
...
  ```

## CSS embebido:
    Se aplica directamente en el arxivo HTML, pero en la etiqueta que nos interese, pasa como en la forma anterior, se debe 
  se debe utilizar solo en casos excepcionales, siendo recomendable el externo.
   ej.
  ```
  <p>¡Hola <span style="color:#FF0000">amigo lector</span>!</p>
  ```
 ## CREAR UNA LISTA SIN ORDENAR CON 5 INGREDIENTES DE UNA RECETA DE COCINA.
  ej.
  ```
  
  <!DOCTYPE html>
<html>
<head>
	<title></title>
</head>
<body>
	<h1>
		RECETAS DE COCINA
	</h1>
<UL>
	<li>
		Pollo al curry:
	</li>
	<li>
		200g. de pollo
	</li>
	<li>
		100g. de mantequilla
	</li>
	<li>
		500g. de arroz
	</li>
	<li>
		150g. de curri
	</li>
	<li>
		1,5l. de agua salada
	</li>
</UL>
</body>
</html>
  ```

## COMO INCLUIR JAVASCRIPT EN HTML
  Se puede incluir de tres formas diferentes:
  JavaScript interno:
      se encierra entre etiquetas <script>, se puede incluir en cualquier zona de la página, aunque es recomendable 
    definirlo dentro de la cabecera del documento. Para que el documento sea valido, se debe incluir el atributo "type"
    el principal inconveniente es, que si se quiere hacer una modificación en el bloque de código es necesario modificar
    todas las páginas.
    ej.
    ```
    
    

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>Ejemplo de código JavaScript en el propio documento</title>
<script type="text/javascript">
  alert("Un mensaje de prueba");
</script>
</head>
 
<body>
<p>Un párrafo de texto.</p>
</body>
</html>

  ```

  ## JavaScript externo:
      Las instrucciones se guardan en un documento externo, enlazandola mediante la etiqueta <script>, se pueden crear
    tantos como sean necesarios y se pueden enlazar tantos como se deseen. Ademas de <type>, tambien es necesario 
    definir el atributo "src", correspondiente al arxivo JavaScript que se quiere enlazar.
    La principal ventaja es, que se consigu una codigo HTML mas limpio, y que cualquier modificacion del JavaEscript, 
    se efectuara en todas las paginas enlazadas.
    ej.
    ```

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>Ejemplo de código JavaScript en el propio documento</title>
<script type="text/javascript" src="/js/codigo.js"></script>
</head>
 
<body>
<p>Un párrafo de texto.</p>
</body>
</html>

  ```

 ## JavaScript en los elementos XHTML:
    Poco recomendable, ya que ensucia el código HTML, se utiliza en casos muy aislados.
  ej.
  ```
  
  

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>Ejemplo de código JavaScript en el propio documento</title>
</head>
 
<body>
<p onclick="alert('Un mensaje de prueba')">Un párrafo de texto.</p>
</body>
</html>
  ```
## DIFERENCIA ENTRE CLASE E ID
  ### ID:
    El selector ID, hace referencia a un solo elemento (identdad), tiene mas peso que el selector CLASS, lo que quiere 
    decir que una modificación en ID modificara la modificación hecha con CLASS.
    ej.
### HTML
```
<div id="unico">Charmander</div>

  ```
### CSS
```
#unico {
  background: orange;
  margin: 1rem;
  padding: 1rem;
  text-align: center;
  color: yellow;
  font-size: 2rem;
  ```

 ### CLASS:
    El selector CLASS, hace referencia a varios elementos, se pueden incluir los que se quieran, y modificara los atributos
    de todos los elementos que esten dentro del CLASS. En el caso de ID, tambien se puede enlazer varios elementos, pero por
    definición se utiliza en un solo elemento.
    ej.
### HTML
```
<div class="pokemon">Squirtle</div>
  ```
### CSS
```
.pokemon {
  background: #02B1FC;
  margin: 1rem;
  padding: 1rem;
  text-align: center;
  color: white;
  font-size: 2rem;
}
  ```

### CODIGO PARA ENLAZAR A OTRA PÁGINA Y QUE SE ABRA EN OTRA VENTANA
```
 <a href="pagina.html" target="_blank">Título del enlace</a>.
   ```
## QUE SON LAS PSEUDOCLASES?
    Es una palabra clave que se añade a los selectores, y que especifica un estado especial del elemento seleccionado.
  Permiten aplicar un estilo a un elemento, no solo en relación con el contenido del arbol, sino tambien en relación a 
  factores externos como el historial de navegación (:visited), el estado de su contenido (:chacked) o la posición del
  ratón (:hover), que permite saber si el raton esta o no encima de un elemento. En resumen, el estilo se aplica solo 
  cuando se realiza la acción marcada por la pseudoclase.
  ej.
```
div:hover {
  background-color: #F89B4D;
}
  ```

## EXPLICA EL MODELO DE CAJA DE CSS (MARGIN, PADDING, BORDER)

  El modelo de cajas es el comportamiento de CSS que hace que todos los elementos de las páginas se representen mediante 
cajas rectangulares. Las cajas se crean automaticamente al definir cada elemento HTML.
  Padding: 
    Espacio libre opcional existente entre el contenido y el borde.
 Border:
    línea que encierra completamente el contenido y su relleno.
 Margin:
    separación opcional existente entre la caja y el resto de cajas adyacentes.
    
## EXPLICA QUE SON LOS SELECTORES DE CSS Y PON EJEMPLOS
  Permiten hacer cambios de estilo solo a los elementos seleccionados por el selector, modificandolos de forma aislada del
  resto de elementos. Es una función muy utilizada, que permite diferenciar los distintos elementos con un estilo propio 
  para cada uno de ellos.
  ejs.
  ```
  /* Todos los elementos <a> */
a {
  color: red;
}
  ```

```
span {
  background-color: skyblue;
}
  ```
```
<span>Aquí hay un elemento 'span' con algo de texto.</span>
<p>Aquí hay un elemento 'p' con algo de texto.</p>
<span>Aquí hay un elemento 'span' con más texto.</span>
  ```
## DI A QUIEN AFECTAN
```
  p a { color: red;:
    Afecta a todos los elementos "a" que esten dentro de "p".
  p > a { color: red; }:
    Afecta a todos los elementos de "a" que sean hijos directos de "p".
  h1 + h2 { color: red }:
    Afecta solo al primer elemento "h2" despues de "h1".
  a[class] { color: blue; }:
    Afecta a todos los elementos de "class".
  a[class="externo"] { color: blue; }:
    Afecta a todos los elementos de "class" que contengan tambien el atributo "=externo".
  a[href="http://www.ejemplo.com"] { color: blue; }:
    Afecta al elemento "a" que enlaza a una página web externa.
  ```




  
  



    
    
    
    
    
  
  
